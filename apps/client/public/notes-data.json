{
  "pages": {
    "1": {
      "id": "1",
      "title": "Personal Knowledge Base",
      "parentId": null,
      "isExpanded": true,
      "emoji": "📚",
      "position": 0,
      "content": "Welcome to my personal knowledge base! This page contains all my learning materials and references.\n\n## Overview\nThis is the main hub for organizing my thoughts, learnings, and resources.",
      "hasChildren": true,
      "createdAt": "2024-01-15T09:00:00Z",
      "updatedAt": "2024-07-20T14:30:00Z"
    },
    "2": {
      "id": "2",
      "title": "Programming",
      "parentId": "1",
      "isExpanded": true,
      "emoji": "💻",
      "position": 0,
      "content": "# Programming Knowledge\n\nThis page contains all my programming-related notes and resources.\n\n## Current Focus\n- React ecosystem\n- Full-stack development\n- Best practices and patterns\n\n## Progress Tracking\n- ✅ React fundamentals\n- 🔄 Advanced patterns\n- ⏳ Performance optimization",
      "hasChildren": true,
      "createdAt": "2024-01-16T10:00:00Z",
      "updatedAt": "2024-07-18T16:20:00Z"
    },
    "3": {
      "id": "3",
      "title": "React Best Practices",
      "parentId": "2",
      "isExpanded": false,
      "emoji": "⚛️",
      "position": 0,
      "content": "# React Best Practices\n\n## Component Structure\n- Use functional components with hooks\n- Keep components small and focused\n- Implement proper prop validation\n\n## State Management\n```javascript\n// Use useState for local state\nconst [count, setCount] = useState(0);\n\n// Use useReducer for complex state\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\n## Performance Tips\n- Use React.memo for expensive components\n- Implement useCallback and useMemo wisely\n- Avoid inline object/function creation in render",
      "hasChildren": true,
      "createdAt": "2024-02-01T11:00:00Z",
      "updatedAt": "2024-07-15T09:45:00Z"
    },
    "4": {
      "id": "4",
      "title": "Component Patterns",
      "parentId": "3",
      "isExpanded": false,
      "emoji": "🏗️",
      "position": 0,
      "content": "# Advanced Component Patterns\n\n## Render Props Pattern\n```javascript\nfunction DataProvider({ children }) {\n  const [data, setData] = useState(null);\n  \n  return children({ data, setData });\n}\n```\n\n## Compound Components\n```javascript\nfunction Tabs({ children }) {\n  return <div className=\"tabs\">{children}</div>;\n}\n\nTabs.Tab = function Tab({ children }) {\n  return <div className=\"tab\">{children}</div>;\n};\n```",
      "hasChildren": false,
      "createdAt": "2024-02-15T14:30:00Z",
      "updatedAt": "2024-07-10T16:45:00Z"
    },
    "5": {
      "id": "5",
      "title": "Hooks Deep Dive",
      "parentId": "3",
      "isExpanded": false,
      "emoji": "🪝",
      "position": 1,
      "content": "# React Hooks Deep Dive\n\n## Custom Hooks\n```javascript\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n```\n\n## Hook Rules\n1. Only call hooks at the top level\n2. Only call hooks from React functions\n3. Use ESLint plugin to enforce rules",
      "hasChildren": false,
      "createdAt": "2024-02-20T10:15:00Z",
      "updatedAt": "2024-07-08T12:30:00Z"
    },
    "6": {
      "id": "6",
      "title": "Tools & Setup",
      "parentId": "2",
      "isExpanded": false,
      "emoji": "🛠️",
      "position": 1,
      "content": "# Development Tools & Environment Setup\n\nThis page contains all my development environment configurations and tool recommendations.\n\n## Essential Tools\n- VS Code with extensions\n- Git workflow\n- Package managers (npm/yarn/pnpm)\n- Build tools and bundlers\n\n## Environment Variables\n```bash\n# Development\nNODE_ENV=development\nREACT_APP_API_URL=http://localhost:3001\n\n# Production\nNODE_ENV=production\nREACT_APP_API_URL=https://api.example.com\n```",
      "hasChildren": true,
      "createdAt": "2024-02-10T08:15:00Z",
      "updatedAt": "2024-07-12T13:40:00Z"
    },
    "7": {
      "id": "7",
      "title": "VS Code Extensions",
      "parentId": "6",
      "isExpanded": false,
      "emoji": "🔧",
      "position": 0,
      "content": "# Essential VS Code Extensions\n\n## Must-Have Extensions\n\n### Code Quality\n1. **Prettier** - Code formatter\n   - Auto-format on save\n   - Consistent code style\n\n2. **ESLint** - Code linting\n   - Catch errors early\n   - Enforce coding standards\n\n3. **GitLens** - Git supercharged\n   - Blame annotations\n   - Commit history\n\n### Productivity\n1. **Auto Rename Tag** - Sync HTML/JSX tags\n2. **Bracket Pair Colorizer** - Color-coded brackets\n3. **Thunder Client** - API testing in VS Code\n\n### React-Specific\n1. **ES7+ React/Redux/React-Native snippets**\n2. **React Developer Tools**\n3. **vscode-styled-components**\n\n## Configuration\n```json\n{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"emmet.includeLanguages\": {\n    \"javascript\": \"javascriptreact\"\n  }\n}\n```",
      "hasChildren": false,
      "createdAt": "2024-02-11T09:30:00Z",
      "updatedAt": "2024-07-05T10:15:00Z"
    },
    "8": {
      "id": "8",
      "title": "Git Workflow",
      "parentId": "6",
      "isExpanded": false,
      "emoji": "🌿",
      "position": 1,
      "content": "# Git Workflow & Best Practices\n\n## Branch Strategy\n```bash\n# Feature branch workflow\ngit checkout -b feature/user-authentication\ngit add .\ngit commit -m \"feat: implement user login\"\ngit push origin feature/user-authentication\n```\n\n## Conventional Commits\n- `feat:` new feature\n- `fix:` bug fix\n- `docs:` documentation\n- `style:` formatting\n- `refactor:` code refactoring\n- `test:` adding tests\n- `chore:` maintenance\n\n## Git Configuration\n```bash\n# Global setup\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\ngit config --global init.defaultBranch main\n\n# Useful aliases\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.lg \"log --oneline --graph --all\"\n```",
      "hasChildren": false,
      "createdAt": "2024-02-12T15:45:00Z",
      "updatedAt": "2024-06-28T14:20:00Z"
    },
    "9": {
      "id": "9",
      "title": "Learning Resources",
      "parentId": "1",
      "isExpanded": true,
      "emoji": "📖",
      "position": 1,
      "content": "# Learning Resources Hub\n\nCentralized collection of learning materials, courses, books, and tutorials.\n\n## Learning Strategy\n1. **Theory First** - Understand concepts\n2. **Practice** - Build projects\n3. **Review** - Revisit and reinforce\n4. **Teach** - Explain to others\n\n## Progress Tracking\n- 📚 Books: 12/20 completed\n- 🎓 Courses: 8/15 finished\n- 🎯 Projects: 5/10 built\n\n## Next Learning Goals\n- [ ] Complete System Design course\n- [ ] Read \"Clean Architecture\"\n- [ ] Build a microservices project",
      "hasChildren": true,
      "createdAt": "2024-01-20T12:00:00Z",
      "updatedAt": "2024-07-19T08:30:00Z"
    },
    "10": {
      "id": "10",
      "title": "Online Courses",
      "parentId": "9",
      "isExpanded": false,
      "emoji": "🎓",
      "position": 0,
      "content": "# Recommended Online Courses\n\n## Frontend Development\n\n### React Ecosystem\n1. **The Complete React Developer Course** ⭐⭐⭐⭐⭐\n   - Status: ✅ Completed\n   - Duration: 40 hours\n   - Key learnings: Hooks, Context, Redux\n\n2. **Advanced React Patterns** ⭐⭐⭐⭐\n   - Status: 🔄 In Progress (70%)\n   - Duration: 25 hours\n   - Key topics: Render props, HOCs, Compound components\n\n### CSS & Styling\n1. **Advanced CSS and Sass** ⭐⭐⭐⭐⭐\n   - Status: ✅ Completed\n   - Grid, Flexbox, Animations\n\n2. **Tailwind CSS Masterclass**\n   - Status: ⏳ Planned\n   - Utility-first CSS framework\n\n## Backend Development\n\n### Node.js\n1. **Node.js Complete Guide** ⭐⭐⭐⭐\n   - Status: ✅ Completed\n   - Express, MongoDB, Authentication\n\n2. **Microservices with Node.js**\n   - Status: ⏳ Planned\n   - Docker, Kubernetes, Message queues",
      "hasChildren": false,
      "createdAt": "2024-01-25T10:30:00Z",
      "updatedAt": "2024-07-08T16:45:00Z"
    },
    "11": {
      "id": "11",
      "title": "Technical Books",
      "parentId": "9",
      "isExpanded": false,
      "emoji": "📚",
      "position": 1,
      "content": "# Must-Read Technical Books\n\n## Programming Fundamentals\n\n### 📘 Clean Code - Robert C. Martin\n**Status:** ✅ Completed | **Rating:** ⭐⭐⭐⭐⭐\n\n**Key Takeaways:**\n- Meaningful names make code self-documenting\n- Functions should do one thing well\n- Comments are often a code smell\n- Boy Scout Rule: Leave code cleaner than you found it\n\n**Favorite Quote:**\n> \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\"\n\n### 📗 The Pragmatic Programmer - Hunt & Thomas\n**Status:** ✅ Completed | **Rating:** ⭐⭐⭐⭐⭐\n\n**Key Concepts:**\n- DRY Principle (Don't Repeat Yourself)\n- Broken Window Theory\n- Rubber Duck Debugging\n- Code orthogonality\n\n### 📙 You Don't Know JS - Kyle Simpson\n**Status:** 🔄 Reading (Book 3/6) | **Rating:** ⭐⭐⭐⭐\n\n**Progress:**\n- ✅ Up & Going\n- ✅ Scope & Closures  \n- 🔄 this & Object Prototypes\n- ⏳ Types & Grammar\n- ⏳ Async & Performance\n- ⏳ ES6 & Beyond\n\n## System Design\n\n### 📒 Designing Data-Intensive Applications\n**Status:** ⏳ On Reading List | **Priority:** High\n\n**Why Important:**\n- Scalability patterns\n- Database design\n- Distributed systems concepts\n\n### 📕 System Design Interview - Alex Xu\n**Status:** 🔄 Reading | **Rating:** ⭐⭐⭐⭐\n\n**Chapters Completed:**\n- [x] Scale from zero to millions of users\n- [x] Back-of-the-envelope estimation  \n- [x] A framework for system design interviews\n- [ ] Design a rate limiter\n- [ ] Design consistent hashing",
      "hasChildren": false,
      "createdAt": "2024-02-02T09:20:00Z",
      "updatedAt": "2024-07-03T11:25:00Z"
    },
    "12": {
      "id": "12",
      "title": "Work Projects",
      "parentId": null,
      "isExpanded": false,
      "emoji": "🏢",
      "position": 1,
      "content": "# Work Projects Dashboard\n\nOverview of current and past work projects, their status, and key learnings.\n\n## Current Active Projects\n\n### 🚀 Project Alpha - E-commerce Platform\n- **Status:** In Development (Phase 2)\n- **Team Size:** 4 developers\n- **Timeline:** Q2-Q4 2024\n- **Tech Stack:** React, Node.js, MongoDB\n\n### 📊 Analytics Dashboard\n- **Status:** Maintenance Mode\n- **Deployed:** Production\n- **Users:** 500+ daily active\n\n## Completed Projects (2024)\n- ✅ Customer Portal Redesign\n- ✅ Payment Gateway Integration\n- ✅ Mobile App v2.0 Launch\n\n## Key Metrics\n- Projects Delivered: 8\n- On-time Delivery Rate: 87.5%\n- Customer Satisfaction: 4.2/5",
      "hasChildren": true,
      "createdAt": "2024-03-01T08:00:00Z",
      "updatedAt": "2024-07-22T17:30:00Z"
    },
    "13": {
      "id": "13",
      "title": "Project Alpha - E-commerce Platform",
      "parentId": "12",
      "isExpanded": false,
      "emoji": "🛒",
      "position": 0,
      "content": "# Project Alpha - E-commerce Platform\n\n## Project Overview\nBuilding a modern, scalable e-commerce platform from scratch to replace the legacy system.\n\n## Tech Stack\n\n### Frontend\n- **Framework:** React 18 with TypeScript\n- **Styling:** Tailwind CSS + Headless UI\n- **State Management:** Zustand\n- **Routing:** React Router v6\n- **Forms:** React Hook Form + Zod validation\n\n### Backend\n- **Runtime:** Node.js 18\n- **Framework:** Express.js\n- **Database:** MongoDB with Mongoose\n- **Authentication:** JWT + Refresh tokens\n- **File Storage:** AWS S3\n- **Email:** SendGrid\n\n### DevOps\n- **Deployment:** Vercel (Frontend) + Railway (Backend)\n- **CI/CD:** GitHub Actions\n- **Monitoring:** Sentry + LogRocket\n- **Testing:** Jest + React Testing Library\n\n## Project Phases\n\n### ✅ Phase 1: Foundation (Completed)\n- User authentication system\n- Basic UI components library\n- Database schema design\n- API architecture setup\n\n### 🔄 Phase 2: Core Features (In Progress - 65%)\n- Product catalog management\n- Shopping cart functionality\n- Order processing system\n- Payment integration (Stripe)\n\n### ⏳ Phase 3: Advanced Features (Planned)\n- Inventory management\n- Analytics dashboard\n- Marketing tools\n- Mobile app companion\n\n## Current Sprint Goals\n- [ ] Complete checkout flow\n- [ ] Implement order history\n- [ ] Add product reviews system\n- [ ] Setup email notifications\n\n## Challenges & Solutions\n\n### Challenge: State Management Complexity\n**Problem:** Managing cart state across multiple components\n**Solution:** Implemented Zustand store with persist middleware\n\n### Challenge: Payment Security\n**Problem:** PCI compliance requirements\n**Solution:** Using Stripe Elements for secure payment handling\n\n## Key Learnings\n1. TypeScript significantly reduces runtime errors\n2. Proper error boundaries improve user experience\n3. API rate limiting is crucial for production apps\n4. Comprehensive testing saves debugging time",
      "hasChildren": true,
      "createdAt": "2024-03-05T09:15:00Z",
      "updatedAt": "2024-07-21T14:20:00Z"
    },
    "14": {
      "id": "14",
      "title": "Technical Architecture",
      "parentId": "13",
      "isExpanded": false,
      "emoji": "🏗️",
      "position": 0,
      "content": "# Technical Architecture\n\n## System Architecture Overview\n\n```\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│   React     │    │   Node.js   │    │  MongoDB    │\n│  Frontend   │◄──►│   Backend   │◄──►│  Database   │\n│  (Vercel)   │    │ (Railway)   │    │   (Atlas)   │\n└─────────────┘    └─────────────┘    └─────────────┘\n       │                   │                   │\n       ▼                   ▼                   ▼\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│    CDN      │    │    Redis    │    │    AWS S3   │\n│ (Cloudflare)│    │   (Cache)   │    │ (File Store)│\n└─────────────┘    └─────────────┘    └─────────────┘\n```\n\n## Database Schema\n\n### Users Collection\n```javascript\n{\n  _id: ObjectId,\n  email: String,\n  password: String, // hashed\n  profile: {\n    firstName: String,\n    lastName: String,\n    avatar: String,\n    dateOfBirth: Date\n  },\n  addresses: [{\n    type: String, // 'shipping' | 'billing'\n    street: String,\n    city: String,\n    country: String,\n    postalCode: String\n  }],\n  createdAt: Date,\n  updatedAt: Date\n}\n```\n\n### Products Collection\n```javascript\n{\n  _id: ObjectId,\n  name: String,\n  slug: String,\n  description: String,\n  price: Number,\n  images: [String],\n  category: ObjectId,\n  inventory: {\n    quantity: Number,\n    reserved: Number,\n    available: Number\n  },\n  specifications: Map,\n  isActive: Boolean,\n  createdAt: Date,\n  updatedAt: Date\n}\n```\n\n### Orders Collection\n```javascript\n{\n  _id: ObjectId,\n  userId: ObjectId,\n  items: [{\n    productId: ObjectId,\n    quantity: Number,\n    price: Number,\n    name: String\n  }],\n  totals: {\n    subtotal: Number,\n    tax: Number,\n    shipping: Number,\n    total: Number\n  },\n  status: String, // 'pending' | 'confirmed' | 'shipped' | 'delivered'\n  paymentMethod: String,\n  shippingAddress: Object,\n  createdAt: Date,\n  updatedAt: Date\n}\n```\n\n## API Design\n\n### RESTful Endpoints\n```\nGET    /api/products              # List products\nGET    /api/products/:id          # Get product details\nPOST   /api/products              # Create product (admin)\nPUT    /api/products/:id          # Update product (admin)\nDELETE /api/products/:id          # Delete product (admin)\n\nPOST   /api/auth/login            # User login\nPOST   /api/auth/register         # User registration\nPOST   /api/auth/logout           # User logout\nGET    /api/auth/me               # Get current user\n\nGET    /api/cart                  # Get user cart\nPOST   /api/cart/items            # Add item to cart\nPUT    /api/cart/items/:id        # Update cart item\nDELETE /api/cart/items/:id        # Remove from cart\n\nPOST   /api/orders                # Create order\nGET    /api/orders                # Get user orders\nGET    /api/orders/:id            # Get order details\n```\n\n## Security Measures\n\n### Authentication\n- JWT tokens with 15-minute expiry\n- Refresh tokens with 7-day expiry\n- HTTP-only cookies for token storage\n- Rate limiting on auth endpoints\n\n### Data Validation\n- Input sanitization using express-validator\n- Schema validation with Joi\n- SQL injection prevention\n- XSS protection with helmet.js\n\n### Infrastructure Security\n- HTTPS everywhere\n- CORS configuration\n- Environment variables for secrets\n- Database connection encryption",
      "hasChildren": false,
      "createdAt": "2024-03-10T11:30:00Z",
      "updatedAt": "2024-07-15T09:20:00Z"
    },
    "15": {
      "id": "15",
      "title": "Meeting Notes",
      "parentId": "12",
      "isExpanded": false,
      "emoji": "📋",
      "position": 1,
      "content": "# Meeting Notes Archive\n\nCollection of important meeting notes, decisions, and action items.\n\n## Meeting Types\n- 🔄 **Daily Standups** - Progress updates and blockers\n- 📋 **Sprint Planning** - Feature planning and estimation\n- 🎯 **Retrospectives** - Team improvement discussions\n- 🏢 **Stakeholder Reviews** - Client feedback and direction\n\n## Quick Access\n- Latest standup: [July 23, 2024](#)\n- Last sprint planning: [July 15, 2024](#)\n- Recent retrospective: [July 10, 2024](#)\n\n## Action Items Dashboard\n### Open Actions\n- [ ] Setup staging environment - Mike (Due: July 25)\n- [ ] Design system documentation - Sarah (Due: July 30)\n- [ ] Performance audit - Team (Due: August 5)\n\n### Completed This Week\n- ✅ API documentation update - John\n- ✅ User testing session - Sarah\n- ✅ Security review - Mike",
      "hasChildren": true,
      "createdAt": "2024-03-10T10:30:00Z",
      "updatedAt": "2024-07-20T09:45:00Z"
    },
    "16": {
      "id": "16",
      "title": "VS Code Extensions",
      "parentId": null,
      "isExpanded": false,
      "emoji": "🔧",
      "position": 2,
      "content": "# Essential VS Code Extensions\n\n## Must-Have Extensions\n\n### Code Quality\n1. **Prettier** - Code formatter\n   - Auto-format on save\n   - Consistent code style\n\n2. **ESLint** - Code linting\n   - Catch errors early\n   - Enforce coding standards\n\n3. **GitLens** - Git supercharged\n   - Blame annotations\n   - Commit history\n\n### Productivity\n1. **Auto Rename Tag** - Sync HTML/JSX tags\n2. **Bracket Pair Colorizer** - Color-coded brackets\n3. **Thunder Client** - API testing in VS Code\n\n### React-Specific\n1. **ES7+ React/Redux/React-Native snippets**\n2. **React Developer Tools**\n3. **vscode-styled-components**\n\n## Configuration\n```json\n{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"emmet.includeLanguages\": {\n    \"javascript\": \"javascriptreact\"\n  }\n}\n```",
      "hasChildren": false,
      "createdAt": "2024-02-11T09:30:00Z",
      "updatedAt": "2024-07-05T10:15:00Z"
    }
  }
}
